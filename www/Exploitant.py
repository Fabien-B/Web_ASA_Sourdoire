import mysql.connector

class Exploitant(object):
    database = 'asa'

    def __init__(self,id_ex,nom=None,mail=None,tel=None,login=None,password=None,salt=None):
        if  id_ex>=0:
            self.load(id_ex)
        else:
            connection = mysql.connector.connect(user='root', password='root',host='127.0.0.1',database='asa')
            curseur = connection.cursor()
            requete = 'select max(Id_Exploitant) from Exploitant;'
            curseur.execute(requete)
            (maxId,)=curseur.fetchall()[0]
            self.id = maxId + 1
            self.nom = nom
            self.mail = mail
            self.tel = tel
            self.login = login
            self.password = password
            self.salt = salt

    def save(self):     #TODO v√©rifier les NULL et None / BDD
        if self.login == None or self.password == None or self.salt == None:
            raise ExploitantError("Miss login, password or salt for saving exploitant")

        if self.nom != None:
            nom = "'{}'".format(self.nom)
        else:
            nom = 'NULL'

        if self.mail != None:
            mail = "'{}'".format(self.mail)
        else:
            mail = 'NULL'

        if self.tel != None:
            tel = "'{}'".format(self.tel)
        else:
            tel = 'NULL'

        login = "'{}'".format(self.login)
        password = "'{}'".format(self.password)
        salt = "'{}'".format(self.salt)

        connection = mysql.connector.connect(user='root', password='root',host='127.0.0.1',database='asa')
        curseur = connection.cursor()
        requete = "INSERT INTO Exploitant VALUES ({0},{1},{2},{3},{4},{5},{6});".format(self.id, nom, mail, tel, login, password, salt)
        curseur.execute(requete)
        connection.commit()

    def load(self,id_ex):
        connection = mysql.connector.connect(user='root', password='root',host='127.0.0.1',database='asa')
        curseur = connection.cursor()
        requete = 'select * from Exploitant where Id_exploitant={};'.format(id_ex)
        curseur.execute(requete)
        try:
            (_,nom,mail,tel,login,password,salt)=curseur.fetchall()[0]
        except IndexError:
            raise ExploitantError("Exploitant with id {} doesn't exist".format(id_ex))

        self.id = id_ex
        self.nom = nom
        self.mail = mail
        self.tel = tel
        self.login = login
        self.password = password
        self.salt = salt

    def update(self, nom, mail, tel, login, password, salt):
        connection = mysql.connector.connect(user='root', password='root',host='127.0.0.1',database='asa')
        curseur = connection.cursor()
        requete = "UPDATE Exploitant SET Nom='{0}', Mail='{1}', Tel='{2}', Login='{3}', Password='{4}', Salt='{5}' WHERE Id_exploitant={6};".format(nom, mail, tel, login, password, salt, self.id)
        curseur.execute(requete)
        connection.commit()

    @staticmethod
    def get_his_parcelle(login):
            connection = mysql.connector.connect(user='root', password='root',host='127.0.0.1',database='asa')
            curseur = connection.cursor()
            requete = 'SELECT Id_exploitant from Exploitant WHERE Login = "{}";'.format(login)
            curseur.execute(requete)
            Id_exploitant = curseur.fetchall()[0][0]
            requete2 = 'SELECT Compteur.Nom , Parcelle.Nom FROM Compteur, Parcelle WHERE Parcelle.Compteur = Compteur.Id_compteur AND Parcelle.Id_parcelle in ( SELECT DISTINCT Id_parcelle from Propriete WHERE Id_exploitant = "{}")'.format(Id_exploitant)
            curseur.execute(requete2)
            List_parcelle_compteur = curseur.fetchall()

            return (List_parcelle_compteur)

    @staticmethod
    def exist_login(login):
        connection = mysql.connector.connect(user='root', password='root',host='127.0.0.1',database='asa')
        curseur = connection.cursor()
        requete = 'select login from Exploitant;'
        curseur.execute(requete)
        logins_tuples = curseur.fetchall()
        logins_list = []
        for (log,) in logins_tuples:
            logins_list.append(log)
        if not login in logins_list:
            return -1   #le login n'existe pas
        requete = "select Id_exploitant from Exploitant where login='{}';".format(login)
        curseur.execute(requete)
        (id_ex,)=curseur.fetchall()[0]
        return id_ex



    @staticmethod
    def get_all_exploitants():
        connection = mysql.connector.connect(user='root', password='root',host='127.0.0.1',database='asa')
        curseur = connection.cursor()
        requete = 'SELECT Id_exploitant from Exploitant;'
        curseur.execute(requete)
        Id_exploitant_list = curseur.fetchall()
        exploitant_list = []
        for i in range(1, len(Id_exploitant_list)):
            exploitant_list.append(Exploitant(Id_exploitant_list[i][0]))
        return exploitant_list


class ExploitantError(Exception):
    pass
